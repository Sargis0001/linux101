{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/loader.js","pages/_loading.js","layouts/header-menu.js","layouts/main-layout.js","page-router.js","app.js","index.js"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Loader","type","justify","align","style","minHeight","indicator","LoadingOutlined","fontSize","spin","LoadingPage","Helmet","title","HeaderMenu","height","width","display","to","margin","src","process","alt","flex","direction","float","padding","shape","size","href","target","GithubOutlined","menuItems","key","icon","HomeOutlined","label","MainLayout","useState","collapsed","setCollapsed","Header","backgroundColor","borderBottom","paddingTop","Sider","theme","overflow","position","borderRight","breakpoint","collapsible","onCollapse","mode","defaultSelectedKeys","undefined","defaultOpenKeys","items","Content","page","elem","fallback","IndexPage","lazy","NotFoundPage","PageRouter","element","index","path","App","titleTemplate","defer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f1262d6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {Row, Spin} from 'antd';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nconst Loader = () => (\r\n    <Row type=\"flex\" justify=\"center\" align=\"middle\" style={{minHeight: '100vh'}}>\r\n        <Spin indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\r\n    </Row>\r\n)\r\n\r\nexport default Loader;","import Loader from \"components/loader\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst LoadingPage = () => {\r\n    \r\n    return (\r\n        <>\r\n            <Helmet title=\"Loading\" />\r\n            <Loader />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoadingPage;","import React from \"react\"\r\nimport { Button, Col, Row, Space } from \"antd\"\r\nimport { GithubOutlined } from \"@ant-design/icons\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst HeaderMenu = () => {\r\n\r\n    return (\r\n            <Row style={{ height: 64}}>\r\n                <Col style={{ width: 250, display: 'flex' }}>\r\n                    <Link\r\n                        to=\"/\"\r\n                        style={{\r\n                            margin: 'auto'\r\n                        }}>\r\n                        <img src={`${process.env.PUBLIC_URL}/favicon.png`} height={50} alt=\"Linux 101\" />\r\n                    </Link>\r\n                </Col>\r\n                <Col flex='auto'>\r\n                        <Space direction=\"horizontal\" style={{float: 'right', padding: '0 8px'}}>\r\n                            <Button shape=\"circle\" type=\"default\" size=\"large\" href=\"https://github.com/davitp/linux101\" target=\"_blank\"><GithubOutlined /></Button>\r\n                        </Space>\r\n                </Col>\r\n            </Row>\r\n    )\r\n}\r\n\r\nexport default HeaderMenu\r\n\r\n\r\n","import React, { useState } from \"react\"\r\nimport { Layout, Menu } from \"antd\"\r\nimport { Outlet } from \"react-router-dom\"\r\nimport { HomeOutlined } from \"@ant-design/icons\"\r\nimport HeaderMenu from \"./header-menu\"\r\n\r\nconst menuItems = [\r\n   {\r\n      key: 'home',\r\n      icon: <HomeOutlined />,\r\n      label: 'Home'\r\n   }\r\n]\r\n\r\n\r\nexport default function MainLayout() {\r\n\r\n   const [collapsed, setCollapsed] = useState(false)\r\n\r\n   return (\r\n      <>\r\n         <Layout style={{ minHeight: \"100vh\" }}>\r\n            <Layout.Header style={{ width: '100%', padding: 0, backgroundColor: 'white', borderBottom: '1px solid #e4e9f0' }}>\r\n               <HeaderMenu />\r\n            </Layout.Header>\r\n\r\n            <Layout style={{ backgroundColor: 'white', paddingTop: 18 }}>\r\n               <Layout.Sider width=\"250px\" theme=\"light\"\r\n                  style={{\r\n                     overflow: 'auto',\r\n                     minHeight: '100vh',\r\n                     position: 'relative',\r\n                     borderRight: '1px solid #e4e9f0'\r\n                  }}\r\n                  breakpoint=\"md\"\r\n                  collapsible\r\n                  onCollapse={setCollapsed}>\r\n\r\n                  <Menu\r\n                     mode=\"inline\"\r\n                     defaultSelectedKeys={collapsed ? undefined : ['home']}\r\n                     defaultOpenKeys={collapsed ? undefined : ['home']}\r\n                     style={{\r\n                        height: '100%',\r\n                        borderRight: 0,\r\n                     }}\r\n                     items={menuItems}\r\n                  />\r\n               </Layout.Sider>\r\n               <Layout.Content style={{\r\n                  margin: '18px 18px',\r\n                  padding: '8px 8x',\r\n                  backgroundColor: 'white'\r\n               }}>\r\n                  <Outlet />\r\n               </Layout.Content>\r\n            </Layout>\r\n\r\n         </Layout>\r\n\r\n      </>\r\n   )\r\n}\r\n\r\n","import React, { lazy, Suspense } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport LoadingPage from 'pages/_loading';\nimport MainLayout from 'layouts/main-layout';\n\nconst page = (elem) => (\n    <Suspense fallback={<LoadingPage />}>\n        {elem}\n    </Suspense>\n);\n\nconst IndexPage = lazy(() => import('pages/index'));\nconst NotFoundPage = lazy(() => import('pages/not-found'));\n\n\nconst PageRouter = () => {\n    return (\n        <Routes>\n            <Route element={<MainLayout />}>\n                <Route index element={page(<IndexPage />)} />\n            </Route>\n            <Route path=\"/not-found\" element={page(<NotFoundPage />)} />\n            <Route path=\"*\" element={page(<NotFoundPage />)} />\n        </Routes>\n    )\n}\n\nexport default PageRouter;\n","import './assets/less/main-theme.less'\r\nimport PageRouter from 'page-router';\r\nimport Helmet from 'react-helmet';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <>\r\n      <Helmet titleTemplate=\"%s | Linux 101\" defer={false}>\r\n        <title>Loading</title>\r\n      </Helmet>\r\n\r\n      <HashRouter>\r\n        <PageRouter />\r\n      </HashRouter>\r\n\r\n    </>\r\n  )\r\n};\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\nimport App from 'app';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}